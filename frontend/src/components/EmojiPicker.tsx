import { useState, useRef, useEffect } from 'react'
import { Button } from '@components/ui'

// Common emoji shortcuts mapping
const EMOJI_SHORTCUTS: Record<string, string> = {
  ':waterdrop:': 'üíß',
  ':water:': 'üíß',
  ':droplet:': 'üíß',
  ':coffee:': '‚òïÔ∏è',
  ':coffee_break:': '‚òïÔ∏è',
  ':break:': '‚òïÔ∏è',
  ':pause:': '‚è∏Ô∏è',
  ':eye:': 'üëÄ',
  ':eyes:': 'üëÄ',
  ':vision:': 'üëÄ',
  ':exercise:': 'üèãÔ∏è',
  ':workout:': 'üí™',
  ':fitness:': 'üèÉ',
  ':chair:': 'ü™ë',
  ':posture:': 'ü™ë',
  ':standing:': 'üßç',
  ':stand:': 'üßç',
  ':walk:': 'üö∂',
  ':walking:': 'üö∂',
  ':stretch:': 'ü§∏',
  ':stretching:': 'ü§∏',
  ':meditation:': 'üßò',
  ':breathe:': 'ü´Å',
  ':breathing:': 'ü´Å',
  ':sleep:': 'üò¥',
  ':rest:': 'üò¥',
  ':food:': 'üçé',
  ':eat:': 'üçé',
  ':apple:': 'üçé',
  ':healthy:': 'ü•ó',
  ':salad:': 'ü•ó',
  ':water_glass:': 'ü•§',
  ':drink:': 'ü•§',
  ':book:': 'üìö',
  ':read:': 'üìö',
  ':reading:': 'üìö',
  ':music:': 'üéµ',
  ':listen:': 'üéµ',
  ':phone:': 'üìû',
  ':call:': 'üìû',
  ':message:': 'üí¨',
  ':chat:': 'üí¨',
  ':work:': 'üíº',
  ':office:': 'üíº',
  ':computer:': 'üíª',
  ':laptop:': 'üíª',
  ':screen:': 'üñ•Ô∏è',
  ':monitor:': 'üñ•Ô∏è',
  ':sun:': '‚òÄÔ∏è',
  ':sunlight:': '‚òÄÔ∏è',
  ':moon:': 'üåô',
  ':night:': 'üåô',
  ':star:': '‚≠ê',
  ':stars:': '‚≠ê',
  ':heart:': '‚ù§Ô∏è',
  ':love:': '‚ù§Ô∏è',
  ':thumbs_up:': 'üëç',
  ':good:': 'üëç',
  ':great:': 'üëç',
  ':fire:': 'üî•',
  ':hot:': 'üî•',
  ':ice:': 'üßä',
  ':cold:': 'üßä',
  ':check:': '‚úÖ',
  ':done:': '‚úÖ',
  ':complete:': '‚úÖ',
  ':cross:': '‚ùå',
  ':no:': '‚ùå',
  ':warning:': '‚ö†Ô∏è',
  ':alert:': '‚ö†Ô∏è',
  ':info:': '‚ÑπÔ∏è',
  ':question:': '‚ùì',
  ':help:': '‚ùì',
  ':lightbulb:': 'üí°',
  ':idea:': 'üí°',
  ':rocket:': 'üöÄ',
  ':launch:': 'üöÄ',
  ':target:': 'üéØ',
  ':goal:': 'üéØ',
  ':trophy:': 'üèÜ',
  ':win:': 'üèÜ',
  ':medal:': 'üèÖ',
  ':award:': 'üèÖ',
  ':clock:': 'üïê',
  ':time:': 'üïê',
  ':timer:': '‚è∞',
  ':alarm:': '‚è∞',
  ':calendar:': 'üìÖ',
  ':date:': 'üìÖ',
  ':schedule:': 'üìÖ',
  ':note:': 'üìù',
  ':write:': 'üìù',
  ':writing:': 'üìù',
  ':pencil:': '‚úèÔ∏è',
  ':pen:': '‚úèÔ∏è',
  ':paper:': 'üìÑ',
  ':document:': 'üìÑ',
  ':folder:': 'üìÅ',
  ':file:': 'üìÅ',
  ':trash:': 'üóëÔ∏è',
  ':delete:': 'üóëÔ∏è',
  ':recycle:': '‚ôªÔ∏è',
  ':refresh:': 'üîÑ',
  ':repeat:': 'üîÑ',
  ':plus:': '‚ûï',
  ':add:': '‚ûï',
  ':minus:': '‚ûñ',
  ':remove:': '‚ûñ',
  ':equal:': 'üü∞',
  ':equals:': 'üü∞',
  ':arrow_up:': '‚¨ÜÔ∏è',
  ':up:': '‚¨ÜÔ∏è',
  ':arrow_down:': '‚¨áÔ∏è',
  ':down:': '‚¨áÔ∏è',
  ':arrow_left:': '‚¨ÖÔ∏è',
  ':left:': '‚¨ÖÔ∏è',
  ':arrow_right:': '‚û°Ô∏è',
  ':right:': '‚û°Ô∏è',
  ':up_arrow:': '‚¨ÜÔ∏è',
  ':down_arrow:': '‚¨áÔ∏è',
  ':left_arrow:': '‚¨ÖÔ∏è',
  ':right_arrow:': '‚û°Ô∏è',
}

// All emojis in one flat list for easy scrolling
const ALL_EMOJIS = [
  // Aktivit√§ten
  'üíß', '‚òïÔ∏è', 'üëÄ', 'üèãÔ∏è', 'üßç', 'üö∂', 'ü§∏', 'üßò', 'ü´Å', 'üò¥', '‚è∏Ô∏è', 'üèÉ', 'üí™', 'ü§æ', 'üèä', 'üö¥', 'üèÑ', 'üßó', 'ü§∫', 'üèá',
  // Essen & Trinken
  'üçé', 'ü•ó', 'ü•§', 'üçΩÔ∏è', 'ü•õ', 'üßä', 'üçµ', 'üçå', 'ü•ï', 'ü•í', 'üçÖ', 'ü•ë', 'ü•ú', 'üçá', 'üçì', 'üçä', 'üçã', 'üçë', 'ü•≠', 'üçç',
  // Arbeit & Technik
  'üíª', 'üñ•Ô∏è', 'üì±', '‚å®Ô∏è', 'üñ±Ô∏è', 'üìû', 'üíº', 'üìä', 'üìà', 'üìâ', 'üìã', 'üìå', 'üìé', 'üóÇÔ∏è', 'üìë', 'üìñ', 'üìù', '‚úèÔ∏è', 'üìÑ', 'üìÅ',
  // Gesundheit
  '‚ù§Ô∏è', 'ü´Ä', 'ü´Å', 'üß†', 'ü¶∑', 'üëÅÔ∏è', 'üëÇ', 'ü§≤', 'ü¶µ', 'ü¶∂', 'ü¶¥', 'ü©∏', 'ü©π', 'üíä', 'üíâ', 'ü©∫', 'üß¨', 'ü¶†', 'üß™', 'üî¨',
  // Natur & Wetter
  '‚òÄÔ∏è', 'üåô', '‚≠ê', 'üåßÔ∏è', '‚ùÑÔ∏è', 'üåà', 'üå±', 'üåø', 'üå≥', 'üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'üåº', 'üåæ', 'üçÄ', 'üå≤', 'üåµ', 'üå¥',
  // Emotionen
  'üòä', 'üò¢', 'üò¥', 'ü§î', 'üòÆ', 'üòç', 'ü•≥', 'üò§', 'üòå', 'üòé', 'üòã', 'ü§ó', 'üòá', 'ü§©', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòõ',
  // Symbole
  '‚úÖ', '‚ùå', '‚ö†Ô∏è', '‚ÑπÔ∏è', '‚ùì', 'üí°', 'üéØ', 'üèÜ', 'üèÖ', '‚≠ê', 'üî•', 'üíØ', 'üíé', 'üíç', 'üíé', 'üîÆ', 'üé≤', 'üéØ', 'üé™', 'üé®',
  // Zeit & Kalender
  'üïê', '‚è∞', 'üìÖ', '‚è±Ô∏è', '‚è≤Ô∏è', 'üï∞Ô∏è', 'üìÜ', 'üóìÔ∏è', '‚è≥', '‚åõ', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô', 'üïö',
  // Aktionen
  '‚ûï', '‚ûñ', 'üîÑ', '‚ôªÔ∏è', 'üóëÔ∏è', '‚¨ÜÔ∏è', '‚¨áÔ∏è', '‚¨ÖÔ∏è', '‚û°Ô∏è', 'üéØ', 'üîç', 'üîé', 'üîê', 'üîì', 'üîí', 'üîë', 'üóùÔ∏è', 'üîß', 'üî®', '‚öíÔ∏è',
  // Zus√§tzliche beliebte Emojis
  'üéâ', 'üéä', 'üéà', 'üéÅ', 'üéÄ', 'üéÇ', 'üç∞', 'üßÅ', 'üç™', 'üç©', 'üç≠', 'üç¨', 'üç´', 'üçØ', 'üßà', 'üßÄ', 'ü•ö', 'üç≥', 'ü•ì', 'ü•û'
]

interface EmojiPickerProps {
  value: string
  onChange: (emoji: string) => void
  placeholder?: string
}

export function EmojiPicker({ value, onChange, placeholder = "Emoji ausw√§hlen" }: EmojiPickerProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const inputRef = useRef<HTMLInputElement>(null)
  const pickerRef = useRef<HTMLDivElement>(null)

  // Handle emoji shortcuts
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value
    setSearchTerm(inputValue)
    
    // Check for emoji shortcuts
    if (inputValue.includes(':')) {
      const shortcutMatch = inputValue.match(/:([^:]+):/)
      if (shortcutMatch) {
        const shortcut = `:${shortcutMatch[1]}:`
        const emoji = EMOJI_SHORTCUTS[shortcut.toLowerCase()]
        if (emoji) {
          onChange(emoji)
          setSearchTerm('')
          return
        }
      }
    }
    
    onChange(inputValue)
  }

  // Handle emoji selection - immediate save
  const handleEmojiSelect = (emoji: string) => {
    onChange(emoji)
    setIsOpen(false)
    setSearchTerm('')
  }

  // Close picker when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (pickerRef.current && !pickerRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Filter emojis based on search term
  const getFilteredEmojis = () => {
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase()
      // Search in shortcuts first
      const shortcutMatches = Object.entries(EMOJI_SHORTCUTS)
        .filter(([shortcut, emoji]) => 
          shortcut.toLowerCase().includes(searchLower)
        )
        .map(([shortcut, emoji]) => ({ shortcut, emoji }))
      
      // Search in emoji list
      const emojiMatches = ALL_EMOJIS
        .filter(emoji => emoji.includes(searchTerm))
        .map(emoji => ({ emoji }))
      
      return [...shortcutMatches, ...emojiMatches]
    }
    return ALL_EMOJIS.map(emoji => ({ emoji }))
  }

  const filteredEmojis = getFilteredEmojis()

  return (
    <div className="relative" ref={pickerRef}>
      <div className="flex gap-2">
        <div className="flex-1 relative">
          <input
            ref={inputRef}
            type="text"
            value={searchTerm || value}
            onChange={handleInputChange}
            onFocus={() => setIsOpen(true)}
            placeholder={placeholder}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {value && (
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-lg">
              {value}
            </div>
          )}
        </div>
        <Button
          type="button"
          onClick={() => setIsOpen(!isOpen)}
          className="px-3 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg"
        >
          {isOpen ? '‚úï' : 'üòÄ'}
        </Button>
      </div>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-xl shadow-xl z-50 max-h-80 overflow-hidden">
          {/* Search */}
          <div className="p-3 border-b border-gray-200 bg-gray-50">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Emojis suchen oder :shortcut: eingeben"
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              autoFocus
            />
          </div>

          {/* Emoji Grid - Simple scrollable list */}
          <div className="p-3 max-h-64 overflow-y-auto">
            <div className="grid grid-cols-10 gap-1">
              {filteredEmojis.map((item, index) => (
                <button
                  key={index}
                  onClick={() => handleEmojiSelect(item.emoji)}
                  className="p-2 text-lg hover:bg-blue-100 rounded-lg transition-colors duration-150 hover:scale-110 active:scale-95"
                  title={item.shortcut ? `${item.emoji} (${item.shortcut})` : item.emoji}
                >
                  {item.emoji}
                </button>
              ))}
            </div>
            
            {filteredEmojis.length === 0 && (
              <div className="text-center text-gray-500 py-8">
                <div className="text-2xl mb-2">üîç</div>
                <div>Keine Emojis gefunden</div>
                <div className="text-sm text-gray-400 mt-1">Versuche einen anderen Suchbegriff</div>
              </div>
            )}
          </div>

          {/* Shortcuts Help */}
          <div className="p-3 bg-gray-50 border-t border-gray-200 text-xs text-gray-600">
            <div className="font-medium mb-2">Beliebte Shortcuts:</div>
            <div className="flex flex-wrap gap-1">
              {[':waterdrop:', ':coffee:', ':eye:', ':exercise:', ':chair:', ':standing:'].map(shortcut => (
                <button
                  key={shortcut}
                  onClick={() => {
                    const emoji = EMOJI_SHORTCUTS[shortcut]
                    if (emoji) {
                      handleEmojiSelect(emoji)
                    }
                  }}
                  className="px-2 py-1 bg-white rounded text-xs hover:bg-blue-100 transition-colors"
                >
                  {shortcut}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
